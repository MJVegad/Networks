Application layer (Wrapping up client-server applications)
==========================

*** Outline ***
- Web services 
- Email: SMTP
- DNS
---------------------------------------------


* What are web services? Any service you can get using the web or the
  Internet. Browsing news is one common service people avail. Maps is
  another. However the term web service usually refers to several
  machine-to-machine communications that happen over the Internet
  (beyond the human use of web for just browsing etc). For example,
  you can view your location on a map, and provide/view real time
  traffic. Here, you are not only consuming the map information, but
  you are also populating the database at the mapping service about
  speed and traffic from your side. The common term for what you can
  do with web services is: CRUD (create, read, update, delete) any
  piece of data over the Internet. Summary: web services refer to the
  generic way of exchanging information over the Internet (usually
  excluding the easy-to-understand case of human using the Internet).

* The nascent way to implement web services is via RPC (remote
  procedure call). You have a client that calls a certain procedure on
  a server with certain parameters. The client and server need to
  agree on the data format, APIs etc. Some web service standards are
  built along the lines of this RPC model. For example, SOAP-based web
  services (google up if you want to know more). A SOAP web service
  client is tightly coupled with the server, and they both agree on
  data formats, function calls etc.

* Newer and simpler ways exist to easily develop web services
  today. One such example is called REST (representational state
  transfer). REST uses HTTP protocol (can run on anything that
  supports viewing/updating URIs). It uses the 4 HTTP request verbs
  (GET, PUT, POST, DELETE) for reading, updating, creating, deleting
  respectively. For example, you can use GET to get information from a
  database server, or use PUT to update information at the server. The
  URL/URI contains information on what you want to get/put. REST is
  stateless and simple, while RPC is more generic/powerful but
  complicated to use.

* Another example of a client-server application: email or SMTP
  (Simple Mail Transfer Protocol). Two entities: user agents and mail
  servers. User agents (email clients like Thunderbird or Outlook)
  interface between users and mail servers. Mail servers are for a
  group of users.

* Example. Suppose A (userA@sender.com) wants to send email to
  B (userB@rx.com)

- User agent of A sends the mail to his mail server, say,
  mail.sender.com. (How? we will see later)

- Mail server of sender.com opens SMTP connection with mail server of
  rx.com. SMTP runs on TCP. How does it know the IP and port on which
  to open TCP connection? It resolves domain name to target mail
  server IP address using DNS; see below. Port number is standard for
  SMTP.

- Once mail is delivered, B uses his user agent to retrieve the mail
  (how?)

* Why split functionality between user agent and mail server? Why
  can't A and B run SMTP between their machines? Because machines
  can't be always on, may need to retry etc. So mail servers manage
  mail boxes of many users.

* SMTP has simple commands like HELO, MAIL FROM, RCPT TO, DATA, QUIT
  etc. to transfer the message. SMTP uses persistent TCP connections,
  so can send/receive multiple mails at once.

* Differences between HTTP and SMTP? HTTP is pull vs SMTP is
  push. HTTP has separate responses for each object, but all
  attachments and objects are sent as one mail in SMTP.

* SMTP is between mail servers. What about user agent to mail
  server. At sender side, we can use SMTP again. That is, A's user
  agent can be SMTP client and S's mail server is SMTP server. Note
  that A's mail server acts as SMTP server to A and SMTP client when
  sending to another mail server. 

* Can we use SMTP at receiver side?  No, because it is a push
  protocol. For receiver, we need pull protocol, where user
  periodically checks if he has any mail from his mail server. These
  protocols are called Mail Access Protocols. E.g., POP3, IMAP etc.

* Even HTTP can be used when you used between user agents and mail
  servers - this is webmail. However, mail server to mail server
  communication is always SMTP.

* DNS: Domain Name System. What is DNS? DNS maps hostnames (e.g.,
  www.cse.iitb.ac.in) to IP address. How to design such a system?
  Initially, one file used to hold all mapping when the Internet was
  only a few hundreds of hosts. Now, such a centralized system won't
  scale. Instead we use a heirarchical setup for DNS. Let's look at a
  simplified resolution of the hostname www.cse.iitb.ac.in.

- All DNS requests go to one of the 13 root servers. The root server
  then redirects to one of the TLD (top level domains), here the
  server that handles "in" domain. That is, root server says "I can't
  provide you the IP address of www.cse.iitb.ac.in, but here is the IP
  address of the server that knows about hosts ending with .in".

- Next, you contact the TLD server for "in" domain, which gives you
  the IP address of the server for "ac.in". You walk down the
  hiererchy to the iitb.ac.in name server, to the cse.iitb.ac.in
  server, which gives you the IP address of the web server (www host)
  in its domain.

* The name server that is responsible for a certain domain (e.g.,
  ac.in, iitb.ac.in, cse.iitb.ac.in) is called the authoritative name
  server for that domain. There are usually more than one for
  redundancy. You can also outsource your auth server to a third
  party.

* Every group of hosts also has a "local DNS server" that does all
  this resolution of contacting multiple hosts for you on your behalf.

* DNS responses can be cached. When you get a name->IP mapping, it
  comes with a TTL (time to live). You can reuse that mapping in that
  time without traversing the entire chain again.

* Note that DNS resolves not just names of web servers but also names
  of mail servers. For example, if you send mail to someone
  @iitb.ac.in, your SMTP mail server contacts the domain iitb.ac.in
  asking for the IP address of that SMTP mail server of that domain.

* DNS is also used for load balancing. For example, if you resolve a
  web server's name, you can get different IP addresses depending on
  which replica you are assigned to.

* DNS servers store different types of records. "A record" maps name
  to IP address, and this is the most important type of record. An
  "NS" record maps a name to another name, for example, when you are
  walking down the hierarchy. For example, when you contact the
  authoritative server for "ac.in" domain, it gives you an NS record
  that points to the authoritative server for iitb.ac.in {ac.in,
  iitb.ac.in, NS}, and an A record of the IP address of the auth
  server {iitb.ac.in, XXX.XXX.XXX.XXX, A}. With these two, you can
  contact the next authoritative server in the hierarchy. You also
  have other types of records: MX records for mail servers, and CNAME
  records to give an alias to a hostname.

- CDNs - use DNS to match user to closest replica of data. 
